{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSliderThumb = useSliderThumb;\nvar _utils = require(\"@react-aria/utils\");\nvar _utils2 = require(\"./utils\");\nvar _react = require(\"react\");\nvar _focus = require(\"@react-aria/focus\");\nvar _label = require(\"@react-aria/label\");\nvar _useMove2 = require(\"./useMove\");\nvar _utils3 = require(\"@react-native-aria/utils\");\nfunction useSliderThumb(opts, state) {\n  var _opts$ariaLabelledby;\n  var index = opts.index,\n    isRequired = opts.isRequired,\n    isDisabled = opts.isDisabled,\n    validationState = opts.validationState,\n    trackLayout = opts.trackLayout,\n    inputRef = opts.inputRef;\n  var isVertical = opts.orientation === 'vertical';\n  var direction = (0, _utils3.isRTL)() ? 'rtl' : undefined;\n  var _useGlobalListeners = (0, _utils.useGlobalListeners)(),\n    addGlobalListener = _useGlobalListeners.addGlobalListener,\n    removeGlobalListener = _useGlobalListeners.removeGlobalListener;\n  var labelId = _utils2.sliderIds.get(state);\n  var _useLabel = (0, _label.useLabel)(Object.assign({}, opts, {\n      'id': (0, _utils2.getSliderThumbId)(state, index),\n      'aria-labelledby': (labelId + \" \" + ((_opts$ariaLabelledby = opts['aria-labelledby']) !== null && _opts$ariaLabelledby !== void 0 ? _opts$ariaLabelledby : '')).trim()\n    })),\n    labelProps = _useLabel.labelProps,\n    fieldProps = _useLabel.fieldProps;\n  var value = state.values[index];\n  var focusInput = (0, _react.useCallback)(function () {\n    if (inputRef.current) {\n      (0, _utils.focusWithoutScrolling)(inputRef.current);\n    }\n  }, [inputRef]);\n  var isFocused = state.focusedThumb === index;\n  (0, _react.useEffect)(function () {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n  var stateRef = (0, _react.useRef)(null);\n  stateRef.current = state;\n  var reverseX = direction === 'rtl';\n  var currentPosition = (0, _react.useRef)(null);\n  var _useMove = (0, _useMove2.useMove)({\n      onMoveStart: function onMoveStart() {\n        currentPosition.current = null;\n        state.setThumbDragging(index, true);\n      },\n      onMove: function onMove(_ref) {\n        var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY,\n          pointerType = _ref.pointerType;\n        var size = isVertical ? trackLayout.height : trackLayout.width;\n        if (currentPosition.current == null) {\n          currentPosition.current = stateRef.current.getThumbPercent(index) * size;\n        }\n        if (pointerType === 'keyboard') {\n          var delta = ((reverseX ? -deltaX : deltaX) + (isVertical ? -deltaY : -deltaY)) * stateRef.current.step;\n          currentPosition.current += delta * size;\n          stateRef.current.setThumbValue(index, stateRef.current.getThumbValue(index) + delta);\n        } else {\n          var _delta = isVertical ? deltaY : deltaX;\n          if (isVertical || reverseX) {\n            _delta = -_delta;\n          }\n          currentPosition.current += _delta;\n          stateRef.current.setThumbPercent(index, (0, _utils.clamp)(currentPosition.current / size, 0, 1));\n        }\n      },\n      onMoveEnd: function onMoveEnd() {\n        state.setThumbDragging(index, false);\n      }\n    }),\n    moveProps = _useMove.moveProps;\n  state.setThumbEditable(index, !isDisabled);\n  var _useFocusable = (0, _focus.useFocusable)((0, _utils.mergeProps)(opts, {\n      onFocus: function onFocus() {\n        return state.setFocusedThumb(index);\n      },\n      onBlur: function onBlur() {\n        return state.setFocusedThumb(undefined);\n      }\n    }), inputRef),\n    focusableProps = _useFocusable.focusableProps;\n  var currentPointer = (0, _react.useRef)(undefined);\n  var onDown = function onDown(id) {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n  };\n  var onUp = function onUp(e) {\n    var _e$pointerId, _e$changedTouches;\n    var id = (_e$pointerId = e.pointerId) !== null && _e$pointerId !== void 0 ? _e$pointerId : (_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  };\n  return {\n    inputProps: (0, _utils.mergeProps)(focusableProps, fieldProps, {\n      'type': 'range',\n      'tabIndex': !isDisabled ? 0 : undefined,\n      'min': state.getThumbMinValue(index),\n      'max': state.getThumbMaxValue(index),\n      'step': state.step,\n      'value': value,\n      'disabled': isDisabled,\n      'aria-orientation': opts.orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'onChange': function onChange(e) {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      }\n    }),\n    thumbProps: !isDisabled ? (0, _utils.mergeProps)(moveProps, {\n      onMouseDown: function onMouseDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown();\n      },\n      onPointerDown: function onPointerDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown(e.pointerId);\n      },\n      onTouchStart: function onTouchStart(e) {\n        onDown(e.changedTouches[0].identifier);\n      }\n    }) : {},\n    labelProps: labelProps\n  };\n}","map":{"version":3,"names":["_utils","require","_utils2","_react","_focus","_label","_useMove2","_utils3","useSliderThumb","opts","state","_opts$ariaLabelledby","index","isRequired","isDisabled","validationState","trackLayout","inputRef","isVertical","orientation","direction","isRTL","undefined","_useGlobalListeners","useGlobalListeners","addGlobalListener","removeGlobalListener","labelId","sliderIds","get","_useLabel","useLabel","Object","assign","getSliderThumbId","trim","labelProps","fieldProps","value","values","focusInput","useCallback","current","focusWithoutScrolling","isFocused","focusedThumb","useEffect","stateRef","useRef","reverseX","currentPosition","_useMove","useMove","onMoveStart","setThumbDragging","onMove","_ref","deltaX","deltaY","pointerType","size","height","width","getThumbPercent","delta","step","setThumbValue","getThumbValue","setThumbPercent","clamp","onMoveEnd","moveProps","setThumbEditable","_useFocusable","useFocusable","mergeProps","onFocus","setFocusedThumb","onBlur","focusableProps","currentPointer","onDown","id","window","onUp","e","_e$pointerId","_e$changedTouches","pointerId","changedTouches","identifier","inputProps","getThumbMinValue","getThumbMaxValue","getThumbValueLabel","onChange","parseFloat","target","thumbProps","onMouseDown","button","altKey","ctrlKey","metaKey","onPointerDown","onTouchStart"],"sources":["C:\\Users\\idriss.drame\\Projet\\ApmNews\\node_modules\\@react-native-aria\\slider\\lib\\module\\useSliderThumb.web.ts"],"sourcesContent":["import { AriaSliderThumbProps } from '@react-types/slider';\nimport {\n  clamp,\n  focusWithoutScrolling,\n  mergeProps,\n  useGlobalListeners,\n} from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport React, {\n  ChangeEvent,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  LabelHTMLAttributes,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport { SliderState } from '@react-stately/slider';\nimport { useFocusable } from '@react-aria/focus';\nimport { useLabel } from '@react-aria/label';\nimport { useMove } from './useMove';\nimport { isRTL } from '@react-native-aria/utils';\n\ninterface SliderThumbAria {\n  /** Props for the root thumb element; handles the dragging motion. */\n  thumbProps: HTMLAttributes<HTMLElement>;\n\n  /** Props for the visually hidden range input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>;\n\n  /** Props for the label element for this thumb (optional). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>;\n}\n\ninterface SliderThumbOptions extends AriaSliderThumbProps {\n  /** A ref to the track element. */\n  trackLayout: any;\n  /** A ref to the thumb input element. */\n  inputRef: RefObject<HTMLInputElement>;\n}\n\n/**\n * Provides behavior and accessibility for a thumb of a slider component.\n *\n * @param opts Options for this Slider thumb.\n * @param state Slider state, created via `useSliderState`.\n */\nexport function useSliderThumb(\n  opts: SliderThumbOptions,\n  state: SliderState\n): SliderThumbAria {\n  let {\n    index,\n    isRequired,\n    isDisabled,\n    validationState,\n    trackLayout,\n    inputRef,\n  } = opts;\n\n  let isVertical = opts.orientation === 'vertical';\n\n  let direction = isRTL() ? 'rtl' : undefined;\n  let { addGlobalListener, removeGlobalListener } = useGlobalListeners();\n\n  let labelId = sliderIds.get(state);\n  const { labelProps, fieldProps } = useLabel({\n    ...opts,\n    'id': getSliderThumbId(state, index),\n    'aria-labelledby': `${labelId} ${opts['aria-labelledby'] ?? ''}`.trim(),\n  });\n\n  const value = state.values[index];\n\n  const focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n\n  const isFocused = state.focusedThumb === index;\n\n  useEffect(() => {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n\n  const stateRef = useRef<SliderState>(null);\n  stateRef.current = state;\n  let reverseX = direction === 'rtl';\n  let currentPosition = useRef<number>(null);\n  let { moveProps } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setThumbDragging(index, true);\n    },\n    onMove({ deltaX, deltaY, pointerType }) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current =\n          stateRef.current.getThumbPercent(index) * size;\n      }\n      if (pointerType === 'keyboard') {\n        // (invert left/right according to language direction) + (according to vertical)\n        let delta =\n          ((reverseX ? -deltaX : deltaX) + (isVertical ? -deltaY : -deltaY)) *\n          stateRef.current.step;\n        currentPosition.current += delta * size;\n        stateRef.current.setThumbValue(\n          index,\n          stateRef.current.getThumbValue(index) + delta\n        );\n      } else {\n        let delta = isVertical ? deltaY : deltaX;\n        if (isVertical || reverseX) {\n          delta = -delta;\n        }\n        currentPosition.current += delta;\n        stateRef.current.setThumbPercent(\n          index,\n          clamp(currentPosition.current / size, 0, 1)\n        );\n      }\n    },\n    onMoveEnd() {\n      state.setThumbDragging(index, false);\n    },\n  });\n\n  // Immediately register editability with the state\n  state.setThumbEditable(index, !isDisabled);\n\n  const { focusableProps } = useFocusable(\n    mergeProps(opts, {\n      onFocus: () => state.setFocusedThumb(index),\n      onBlur: () => state.setFocusedThumb(undefined),\n    }),\n    inputRef\n  );\n\n  let currentPointer = useRef<number | undefined>(undefined);\n  let onDown = (id?: number) => {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n  };\n\n  let onUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  };\n\n  // We install mouse handlers for the drag motion on the thumb div, but\n  // not the key handler for moving the thumb with the slider.  Instead,\n  // we focus the range input, and let the browser handle the keyboard\n  // interactions; we then listen to input's onChange to update state.\n  return {\n    inputProps: mergeProps(focusableProps, fieldProps, {\n      'type': 'range',\n      'tabIndex': !isDisabled ? 0 : undefined,\n      'min': state.getThumbMinValue(index),\n      'max': state.getThumbMaxValue(index),\n      'step': state.step,\n      'value': value,\n      'disabled': isDisabled,\n      'aria-orientation': opts.orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'onChange': (e: ChangeEvent<HTMLInputElement>) => {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      },\n    }),\n    thumbProps: !isDisabled\n      ? mergeProps(moveProps, {\n          onMouseDown: (e: React.MouseEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown();\n          },\n          onPointerDown: (e: React.PointerEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown(e.pointerId);\n          },\n          onTouchStart: (e: React.TouchEvent<HTMLElement>) => {\n            onDown(e.changedTouches[0].identifier);\n          },\n        })\n      : {},\n    labelProps,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}