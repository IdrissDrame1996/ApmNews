{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useButton = useButton;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _interactions = require(\"@react-native-aria/interactions\");\nvar _utils = require(\"@react-aria/utils\");\nvar _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressChange\"];\nfunction useButton(props) {\n  var isDisabled = props.isDisabled,\n    onPress = props.onPress,\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    onPressChange = props.onPressChange,\n    rest = (0, _objectWithoutProperties2.default)(props, _excluded);\n  var _usePress = (0, _interactions.usePress)({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPress: onPress,\n      isDisabled: isDisabled\n    }),\n    pressProps = _usePress.pressProps,\n    isPressed = _usePress.isPressed;\n  var mergedProps = (0, _utils.mergeProps)(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled\n  });\n  return {\n    isPressed: isPressed,\n    buttonProps: mergedProps\n  };\n}","map":{"version":3,"names":["_interactions","require","_utils","_excluded","useButton","props","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","rest","_objectWithoutProperties2","default","_usePress","usePress","pressProps","isPressed","mergedProps","mergeProps","accessibilityState","disabled","accessibilityRole","buttonProps"],"sources":["C:\\Users\\idriss.drame\\Projet\\ApmNews\\node_modules\\@react-native-aria\\button\\lib\\module\\useButton.ts"],"sourcesContent":["import { ReactNode } from 'react';\nimport { PressEvents, usePress } from '@react-native-aria/interactions';\nimport { AccessibilityProps, PressableProps } from 'react-native';\nimport { mergeProps } from '@react-aria/utils';\n\ninterface ButtonProps extends PressEvents {\n  /** Whether the button is disabled. */\n  isDisabled?: boolean;\n  /** The content to display in the button. */\n  children?: ReactNode;\n}\n\nexport interface RNAriaButtonProps extends AccessibilityProps, ButtonProps {}\n\nexport interface ButtonAria {\n  /** Props for the button element. */\n  buttonProps: PressableProps;\n  /** Whether the button is currently pressed. */\n  isPressed: boolean;\n}\n\nexport function useButton(props: RNAriaButtonProps): ButtonAria {\n  let {\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    ...rest\n  } = props;\n\n  let { pressProps, isPressed } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n  });\n\n  const mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled,\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled,\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergedProps,\n  };\n}\n"],"mappings":";;;;;;AACA,IAAAA,aAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AAAA,IAAAE,SAAA;AAkBO,SAASC,SAATA,CAAmBC,KAAnB,EAAyD;EAC9D,IACEC,UADE,GAOAD,KAPJ,CACEC,UADE;IAEFC,OAFE,GAOAF,KAPJ,CAEEE,OAFE;IAGFC,YAHE,GAOAH,KAPJ,CAGEG,YAHE;IAIFC,UAJE,GAOAJ,KAPJ,CAIEI,UAJE;IAKFC,aALE,GAOAL,KAPJ,CAKEK,aALE;IAMCC,IAAA,OAAAC,yBAAA,CAAAC,OAAA,EACDR,KAPJ,EAAAF,SAAA;EASA,IAAAW,SAAA,GAAgC,IAAAC,sBAAQ,EAAC;MACvCP,YADuC,EACvCA,YADuC;MAEvCC,UAFuC,EAEvCA,UAFuC;MAGvCC,aAHuC,EAGvCA,aAHuC;MAIvCH,OAJuC,EAIvCA,OAJuC;MAKvCD,UAAA,EAAAA;IALuC,CAAD,CAAxC;IAAMU,UAAF,GAAAF,SAAA,CAAEE,UAAF;IAAcC,SAAA,GAAAH,SAAA,CAAAG,SAAA;EAQlB,IAAMC,WAAW,GAAG,IAAAC,iBAAU,EAACH,UAAD,EAAaL,IAAb,EAAmB;IAC/CS,kBAAkB,EAAE;MAClBC,QAAQ,EAAEf;IADQ,CAD2B;IAI/CgB,iBAAiB,EAAE,QAJ4B;IAK/CD,QAAQ,EAAEf;EALqC,CAAnB,CAA9B;EAQA,OAAO;IACLW,SADK,EACLA,SADK;IAELM,WAAW,EAAEL;EAFR,CAAP;AAID"},"metadata":{},"sourceType":"script","externalDependencies":[]}