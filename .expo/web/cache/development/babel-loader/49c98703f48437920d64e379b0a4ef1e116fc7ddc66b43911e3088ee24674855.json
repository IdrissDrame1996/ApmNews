{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"WebBrowserPresentationStyle\", {\n  enumerable: true,\n  get: function get() {\n    return _WebBrowser.WebBrowserPresentationStyle;\n  }\n});\nObject.defineProperty(exports, \"WebBrowserResultType\", {\n  enumerable: true,\n  get: function get() {\n    return _WebBrowser.WebBrowserResultType;\n  }\n});\nexports.coolDownAsync = coolDownAsync;\nexports.dismissAuthSession = dismissAuthSession;\nexports.dismissBrowser = dismissBrowser;\nexports.getCustomTabsSupportingBrowsersAsync = getCustomTabsSupportingBrowsersAsync;\nexports.mayInitWithUrlAsync = mayInitWithUrlAsync;\nexports.maybeCompleteAuthSession = maybeCompleteAuthSession;\nexports.openAuthSessionAsync = openAuthSessionAsync;\nexports.openBrowserAsync = openBrowserAsync;\nexports.warmUpAsync = warmUpAsync;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _reactNative = require(\"react-native\");\nvar _ExpoWebBrowser = _interopRequireDefault(require(\"./ExpoWebBrowser\"));\nvar _WebBrowser = require(\"./WebBrowser.types\");\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nfunction getCustomTabsSupportingBrowsersAsync() {\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\nfunction _getCustomTabsSupportingBrowsersAsync() {\n  _getCustomTabsSupportingBrowsersAsync = (0, _asyncToGenerator2.default)(function* () {\n    if (!_ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n    }\n    if (_reactNative.Platform.OS !== 'android') {\n      return emptyCustomTabsPackages;\n    } else {\n      return yield _ExpoWebBrowser.default.getCustomTabsSupportingBrowsersAsync();\n    }\n  });\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\nfunction warmUpAsync(_x) {\n  return _warmUpAsync.apply(this, arguments);\n}\nfunction _warmUpAsync() {\n  _warmUpAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n    if (!_ExpoWebBrowser.default.warmUpAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'warmUpAsync');\n    }\n    if (_reactNative.Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield _ExpoWebBrowser.default.warmUpAsync(browserPackage);\n    }\n  });\n  return _warmUpAsync.apply(this, arguments);\n}\nfunction mayInitWithUrlAsync(_x2, _x3) {\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\nfunction _mayInitWithUrlAsync() {\n  _mayInitWithUrlAsync = (0, _asyncToGenerator2.default)(function* (url, browserPackage) {\n    if (!_ExpoWebBrowser.default.mayInitWithUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n    }\n    if (_reactNative.Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield _ExpoWebBrowser.default.mayInitWithUrlAsync(url, browserPackage);\n    }\n  });\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\nfunction coolDownAsync(_x4) {\n  return _coolDownAsync.apply(this, arguments);\n}\nfunction _coolDownAsync() {\n  _coolDownAsync = (0, _asyncToGenerator2.default)(function* (browserPackage) {\n    if (!_ExpoWebBrowser.default.coolDownAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'coolDownAsync');\n    }\n    if (_reactNative.Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield _ExpoWebBrowser.default.coolDownAsync(browserPackage);\n    }\n  });\n  return _coolDownAsync.apply(this, arguments);\n}\nvar browserLocked = false;\nfunction openBrowserAsync(_x5) {\n  return _openBrowserAsync.apply(this, arguments);\n}\nfunction _openBrowserAsync() {\n  _openBrowserAsync = (0, _asyncToGenerator2.default)(function* (url) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!_ExpoWebBrowser.default.openBrowserAsync) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openBrowserAsync');\n    }\n    if (browserLocked) {\n      if (__DEV__) {\n        console.warn('Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.');\n      }\n      return {\n        type: _WebBrowser.WebBrowserResultType.LOCKED\n      };\n    }\n    browserLocked = true;\n    var result;\n    try {\n      result = yield _ExpoWebBrowser.default.openBrowserAsync(url, _processOptions(browserParams));\n    } finally {\n      browserLocked = false;\n    }\n    return result;\n  });\n  return _openBrowserAsync.apply(this, arguments);\n}\nfunction dismissBrowser() {\n  if (!_ExpoWebBrowser.default.dismissBrowser) {\n    throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  _ExpoWebBrowser.default.dismissBrowser();\n}\nfunction openAuthSessionAsync(_x6, _x7) {\n  return _openAuthSessionAsync.apply(this, arguments);\n}\nfunction _openAuthSessionAsync() {\n  _openAuthSessionAsync = (0, _asyncToGenerator2.default)(function* (url, redirectUrl) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (_authSessionIsNativelySupported()) {\n      if (!_ExpoWebBrowser.default.openAuthSessionAsync) {\n        throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      }\n      if (['ios', 'web'].includes(_reactNative.Platform.OS)) {\n        return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n      }\n      return _ExpoWebBrowser.default.openAuthSessionAsync(url, redirectUrl);\n    } else {\n      return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n    }\n  });\n  return _openAuthSessionAsync.apply(this, arguments);\n}\nfunction dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!_ExpoWebBrowser.default.dismissAuthSession) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    _ExpoWebBrowser.default.dismissAuthSession();\n  } else {\n    if (!_ExpoWebBrowser.default.dismissBrowser) {\n      throw new _expoModulesCore.UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    _ExpoWebBrowser.default.dismissBrowser();\n  }\n}\nfunction maybeCompleteAuthSession() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (_ExpoWebBrowser.default.maybeCompleteAuthSession) {\n    return _ExpoWebBrowser.default.maybeCompleteAuthSession(options);\n  }\n  return {\n    type: 'failed',\n    message: 'Not supported on this platform'\n  };\n}\nfunction _processOptions(options) {\n  return Object.assign({}, options, {\n    controlsColor: (0, _reactNative.processColor)(options.controlsColor),\n    toolbarColor: (0, _reactNative.processColor)(options.toolbarColor),\n    secondaryToolbarColor: (0, _reactNative.processColor)(options.secondaryToolbarColor)\n  });\n}\nfunction _authSessionIsNativelySupported() {\n  if (_reactNative.Platform.OS === 'android') {\n    return false;\n  } else if (_reactNative.Platform.OS === 'web') {\n    return true;\n  }\n  var versionNumber = parseInt(String(_reactNative.Platform.Version), 10);\n  return versionNumber >= 11;\n}\nvar _redirectSubscription = null;\nvar _onWebBrowserCloseAndroid = null;\nvar _isAppStateAvailable = _reactNative.AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\nfunction _openBrowserAndWaitAndroidAsync(_x8) {\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\nfunction _openBrowserAndWaitAndroidAsync2() {\n  _openBrowserAndWaitAndroidAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var appStateChangedToActive = new Promise(function (resolve) {\n      _onWebBrowserCloseAndroid = resolve;\n    });\n    var stateChangeSubscription = _reactNative.AppState.addEventListener('change', _onAppStateChangeAndroid);\n    var result = {\n      type: _WebBrowser.WebBrowserResultType.CANCEL\n    };\n    var type = null;\n    try {\n      var _yield$openBrowserAsy = yield openBrowserAsync(startUrl, browserParams);\n      type = _yield$openBrowserAsy.type;\n    } catch (e) {\n      stateChangeSubscription.remove();\n      _onWebBrowserCloseAndroid = null;\n      throw e;\n    }\n    if (type === 'opened') {\n      yield appStateChangedToActive;\n      result = {\n        type: _WebBrowser.WebBrowserResultType.DISMISS\n      };\n    }\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    return result;\n  });\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\nfunction _openAuthSessionPolyfillAsync(_x9, _x10) {\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\nfunction _openAuthSessionPolyfillAsync2() {\n  _openAuthSessionPolyfillAsync2 = (0, _asyncToGenerator2.default)(function* (startUrl, returnUrl) {\n    var browserParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (_redirectSubscription) {\n      throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n    }\n    if (_onWebBrowserCloseAndroid) {\n      throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n    }\n    try {\n      if (_reactNative.Platform.OS === 'android') {\n        return yield Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      } else {\n        return yield Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      }\n    } finally {\n      if (_ExpoWebBrowser.default.dismissBrowser) {\n        _ExpoWebBrowser.default.dismissBrowser();\n      }\n      _stopWaitingForRedirect();\n    }\n  });\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\nfunction _stopWaitingForRedirect() {\n  if (!_redirectSubscription) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n  _redirectSubscription.remove();\n  _redirectSubscription = null;\n}\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(function (resolve) {\n    var redirectHandler = function redirectHandler(event) {\n      if (returnUrl && event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n    _redirectSubscription = _reactNative.Linking.addEventListener('url', redirectHandler);\n  });\n}","map":{"version":3,"names":["_expoModulesCore","require","_reactNative","_ExpoWebBrowser","_interopRequireDefault","_WebBrowser","emptyCustomTabsPackages","defaultBrowserPackage","undefined","preferredBrowserPackage","browserPackages","servicePackages","getCustomTabsSupportingBrowsersAsync","_getCustomTabsSupportingBrowsersAsync","apply","arguments","_asyncToGenerator2","default","ExponentWebBrowser","UnavailabilityError","Platform","OS","warmUpAsync","_x","_warmUpAsync","browserPackage","mayInitWithUrlAsync","_x2","_x3","_mayInitWithUrlAsync","url","coolDownAsync","_x4","_coolDownAsync","browserLocked","openBrowserAsync","_x5","_openBrowserAsync","browserParams","length","__DEV__","console","warn","type","WebBrowserResultType","LOCKED","result","_processOptions","dismissBrowser","openAuthSessionAsync","_x6","_x7","_openAuthSessionAsync","redirectUrl","options","_authSessionIsNativelySupported","includes","_openAuthSessionPolyfillAsync","dismissAuthSession","maybeCompleteAuthSession","message","Object","assign","controlsColor","processColor","toolbarColor","secondaryToolbarColor","versionNumber","parseInt","String","Version","_redirectSubscription","_onWebBrowserCloseAndroid","_isAppStateAvailable","AppState","currentState","_onAppStateChangeAndroid","state","_openBrowserAndWaitAndroidAsync","_x8","_openBrowserAndWaitAndroidAsync2","startUrl","appStateChangedToActive","Promise","resolve","stateChangeSubscription","addEventListener","CANCEL","_yield$openBrowserAsy","e","remove","DISMISS","_x9","_x10","_openAuthSessionPolyfillAsync2","returnUrl","Error","race","_waitForRedirectAsync","_stopWaitingForRedirect","redirectHandler","event","startsWith","Linking"],"sources":["C:\\Users\\idriss.drame\\Projet\\ApmNews\\node_modules\\expo-web-browser\\src\\WebBrowser.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport {\n  AppState,\n  AppStateStatus,\n  Linking,\n  Platform,\n  EmitterSubscription,\n  processColor,\n} from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\n// @needsAudit\n/**\n * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n * service, user chosen and preferred one. This may not be fully reliable, since it uses\n * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n * present in browserPackages list once another browser is set to default.)\n *\n * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n * @platform android\n */\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\n// @needsAudit\n/**\n * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n * for specified package.\n *\n * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n *\n * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n * @platform android\n */\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n * and calls its `mayLaunchUrl` method for browser specified by the package.\n *\n * @param url The url of page that is likely to be loaded first when opening browser.\n * @param browserPackage Package of browser to be informed. If not set, preferred\n * browser will be used.\n *\n * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n * @platform android\n */\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n * this method once you don't need them to avoid potential memory leaks. However, those binding\n * would be cleared once your application is destroyed, which might be sufficient in most cases.\n *\n * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n *\n * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n * an empty object when there was no connection to be dismissed.\n * @platform android\n */\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nlet browserLocked = false;\n\n// @needsAudit\n/**\n * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-browserparams).\n *\n * @param url The url to open in the web browser.\n * @param browserParams A dictionary of key-value pairs.\n *\n * @return The promise behaves differently based on the platform.\n * On Android promise resolves with `{type: 'opened'}` if we were able to open browser.\n * On iOS:\n * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n */\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  if (browserLocked) {\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.'\n      );\n    }\n\n    return { type: WebBrowserResultType.LOCKED };\n  }\n  browserLocked = true;\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, _processOptions(browserParams));\n  } finally {\n    // WebBrowser session complete, unset lock\n    browserLocked = false;\n  }\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Dismisses the presented web browser.\n *\n * @return The `void` on successful attempt, or throws error, if dismiss functionality is not avaiable.\n * @platform ios\n */\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\n// @needsAudit\n/**\n * # On iOS:\n * Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked\n * whether to allow the app to authenticate using the given url.\n * To handle redirection back to the mobile application, the redirect URI set in the authentication server\n * has to use the protocol provided as the scheme in **app.json** [`expo.scheme`](./../config/app/#scheme)\n * e.g. `demo://` not `https://` protocol.\n * Using `Linking.addEventListener` is not needed and can have side effects.\n *\n * # On Android:\n * This will be done using a \"custom Chrome tabs\" browser, [AppState](../react-native/appstate/),\n * and [Linking](./linking/) APIs.\n *\n * # On web:\n * > This API can only be used in a secure environment (`https`). You can use expo `start:web --https`\n * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#errwebbrowsercrypto) will be thrown.\n * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n *\n * How this works on web:\n * - A crypto state will be created for verifying the redirect.\n *   - This means you need to run with `npx expo start --https`\n * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n *   unless it's done from a page running with the same origin as it was started.\n *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n *\n * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n * which takes too long to fire after a user interaction. This method must be invoked immediately\n * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#errwebbrowserblocked) will be thrown.\n *\n * @param url The url to open in the web browser. This should be a login page.\n * @param redirectUrl _Optional_ - The url to deep link back into your app.\n * On web, this defaults to the output of [`Linking.createURL(\"\")`](./linking/#linkingcreateurlpath-namedparameters).\n * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n * If there is no native AuthSession implementation available (which is the case on Android)\n * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n * these params will be ignored.\n *\n * @return\n * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n * the Promise fulfills with `{ type: 'dismiss' }` object.\n */\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl?: string | null,\n  options: AuthSessionOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\n\n// @docsMissing\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n// @needsAudit\n/**\n * Possibly completes an authentication session on web in a window popup. The method\n * should be invoked on the page that the window redirects to.\n *\n * @param options\n *\n * @return Returns an object with message about why the redirect failed or succeeded:\n *\n * If `type` is set to `failed`, the reason depends on the message:\n * - `Not supported on this platform`: If the platform doesn't support this method (iOS, Android).\n * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n *   or node environment.\n * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n *   This can happen if the window redirects to an origin (website) that is different to the initial\n *   website origin. If this happens in development, it may be because the auth started on localhost\n *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n *   and `returnUrl`.\n * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n *   in development by passing `{ skipRedirectCheck: true }` to the function.\n *\n * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n *\n * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n *\n * @platform web\n */\nexport function maybeCompleteAuthSession(\n  options: WebBrowserCompleteAuthSessionOptions = {}\n): WebBrowserCompleteAuthSessionResult {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\nfunction _processOptions(options: WebBrowserOpenOptions) {\n  return {\n    ...options,\n    controlsColor: processColor(options.controlsColor),\n    toolbarColor: processColor(options.toolbarColor),\n    secondaryToolbarColor: processColor(options.secondaryToolbarColor),\n  };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectSubscription: EmitterSubscription | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise<void>((resolve) => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  let type: string | null = null;\n\n  try {\n    ({ type } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string | null | undefined,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  _redirectSubscription.remove();\n  _redirectSubscription = null;\n}\n\nfunction _waitForRedirectAsync(\n  returnUrl: string | null | undefined\n): Promise<WebBrowserRedirectResult> {\n  // Note that this Promise never resolves when `returnUrl` is nullish\n  return new Promise((resolve) => {\n    const redirectHandler = (event: RedirectEvent) => {\n      if (returnUrl && event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    _redirectSubscription = Linking.addEventListener('url', redirectHandler);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}