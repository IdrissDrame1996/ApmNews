{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOverlay = useOverlay;\nvar _react = require(\"react\");\nvar _interactions = require(\"@react-aria/interactions\");\nvar visibleOverlays = [];\nfunction useOverlay(props, ref) {\n  var onClose = props.onClose,\n    shouldCloseOnBlur = props.shouldCloseOnBlur,\n    isOpen = props.isOpen,\n    _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n    isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism;\n  (0, _react.useEffect)(function () {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n    return function () {\n      var index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n  var onHide = function onHide() {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n  var onKeyDown = function onKeyDown(e) {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n  var _useFocusWithin = (0, _interactions.useFocusWithin)({\n      isDisabled: !shouldCloseOnBlur,\n      onBlurWithin: function onBlurWithin() {\n        onClose && onClose();\n      }\n    }),\n    focusWithinProps = _useFocusWithin.focusWithinProps;\n  return {\n    overlayProps: Object.assign({\n      onKeyDown: onKeyDown\n    }, focusWithinProps)\n  };\n}","map":{"version":3,"names":["_react","require","_interactions","visibleOverlays","useOverlay","props","ref","onClose","shouldCloseOnBlur","isOpen","_props$isKeyboardDism","isKeyboardDismissDisabled","useEffect","push","index","indexOf","splice","onHide","length","onKeyDown","e","key","preventDefault","_useFocusWithin","useFocusWithin","isDisabled","onBlurWithin","focusWithinProps","overlayProps","Object","assign"],"sources":["C:\\Users\\idriss.drame\\Projet\\ApmNews\\node_modules\\@react-native-aria\\overlays\\lib\\module\\useOverlay.web.ts"],"sourcesContent":["import { HTMLAttributes, RefObject, useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\n\ninterface OverlayProps {\n  /** Whether the overlay is currently open. */\n  isOpen?: boolean;\n\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void;\n\n  /**\n   * Whether to close the overlay when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean;\n\n  /** Whether the overlay should close when focus is lost or moves outside it. */\n  shouldCloseOnBlur?: boolean;\n\n  /**\n   * Whether pressing the escape key to close the overlay should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean;\n\n  /**\n   * When user interacts with the argument element outside of the overlay ref,\n   * return true if onClose should be called.  This gives you a chance to filter\n   * out interaction with elements that should not dismiss the overlay.\n   * By default, onClose will always be called on interaction outside the overlay ref.\n   */\n  shouldCloseOnInteractOutside?: (element: HTMLElement) => boolean;\n}\n\ninterface OverlayAria {\n  /** Props to apply to the overlay container element. */\n  overlayProps: HTMLAttributes<HTMLElement>;\n}\n\nconst visibleOverlays: RefObject<HTMLElement>[] = [];\n\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\nexport function useOverlay(\n  props: OverlayProps,\n  ref: RefObject<HTMLElement>\n): OverlayAria {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isKeyboardDismissDisabled = false,\n  } = props;\n\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n  useEffect(() => {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  // Only hide the overlay when it is the topmost visible overlay in the stack.\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  // Handle the escape key\n  let onKeyDown = (e: any) => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  // Handle clicking outside the overlay to close it\n\n  let { focusWithinProps } = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: () => {\n      onClose && onClose();\n    },\n  });\n\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps,\n    },\n  };\n}\n"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AAsCA,IAAME,eAAyC,GAAG,EAAlD;AAOO,SAASC,UAATA,CACLC,KADK,EAELC,GAFK,EAGQ;EACb,IACEC,OADE,GAKAF,KALJ,CACEE,OADE;IAEFC,iBAFE,GAKAH,KALJ,CAEEG,iBAFE;IAGFC,MAHE,GAKAJ,KALJ,CAGEI,MAHE;IAAAC,qBAAA,GAKAL,KALJ,CAIEM,yBAAyB;IAAzBA,yBAAyB,GAAAD,qBAAA,cAAG,QAAAA,qBAAA;EAI9B,IAAAE,gBAAS,EAAC,YAAM;IACd,IAAIH,MAAJ,EAAY;MACVN,eAAe,CAACU,IAAhB,CAAqBP,GAArB;IACD;IAED,OAAO,YAAM;MACX,IAAIQ,KAAK,GAAGX,eAAe,CAACY,OAAhB,CAAwBT,GAAxB,CAAZ;MACA,IAAIQ,KAAK,IAAI,CAAb,EAAgB;QACdX,eAAe,CAACa,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;MACD;IACF,CALD;EAMD,CAXQ,EAWN,CAACL,MAAD,EAASH,GAAT,CAXM,CAAT;EAcA,IAAIW,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;IACjB,IAAId,eAAe,CAACA,eAAe,CAACe,MAAhB,GAAyB,CAA1B,CAAf,KAAgDZ,GAAhD,IAAuDC,OAA3D,EAAoE;MAClEA,OAAO;IACR;EACF,CAJD;EAOA,IAAIY,SAAS,GAAI,SAAbA,SAASA,CAAIC,CAAD,EAAY;IAC1B,IAAIA,CAAC,CAACC,GAAF,KAAU,QAAV,IAAsB,CAACV,yBAA3B,EAAsD;MACpDS,CAAC,CAACE,cAAF;MACAL,MAAM;IACP;EACF,CALD;EASA,IAAAM,eAAA,GAA2B,IAAAC,4BAAc,EAAC;MACxCC,UAAU,EAAE,CAACjB,iBAD2B;MAExCkB,YAAY,EAAE,SAAAA,aAAA,EAAM;QAClBnB,OAAO,IAAIA,OAAO,EAAlB;MACD;IAJuC,CAAD,CAAzC;IAAMoB,gBAAA,GAAAJ,eAAA,CAAAI,gBAAA;EAON,OAAO;IACLC,YAAY,EAAAC,MAAA,CAAAC,MAAA;MACVX,SADY,EACZA;IADY,GAETQ,gBAAA;EAHA,CAAP;AAMD"},"metadata":{},"sourceType":"script","externalDependencies":[]}