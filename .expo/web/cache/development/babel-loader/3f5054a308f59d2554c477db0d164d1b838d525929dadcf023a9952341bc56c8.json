{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useToggleButton = useToggleButton;\nvar _useButton2 = require(\"./useButton\");\nvar _utils = require(\"@react-aria/utils\");\nfunction useToggleButton(props, state) {\n  var isSelected = state.isSelected;\n  var _useButton = (0, _useButton2.useButton)(Object.assign({}, props, {\n      onPress: (0, _utils.chain)(state.toggle, props.onPress)\n    })),\n    isPressed = _useButton.isPressed,\n    buttonProps = _useButton.buttonProps;\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, _utils.mergeProps)(buttonProps, {\n      'aria-pressed': isSelected,\n      'accessibilityPressed': isSelected\n    })\n  };\n}","map":{"version":3,"names":["_useButton2","require","_utils","useToggleButton","props","state","isSelected","_useButton","useButton","Object","assign","onPress","chain","toggle","isPressed","buttonProps","mergeProps"],"sources":["C:\\Users\\idriss.drame\\Projet\\ApmNews\\node_modules\\@react-native-aria\\button\\lib\\module\\useToggleButton.web.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ElementType } from 'react';\nimport { AriaToggleButtonProps } from '@react-types/button';\nimport { useButton } from './useButton';\nimport { chain } from '@react-aria/utils';\nimport { mergeProps } from '@react-aria/utils';\nimport { ToggleState } from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(\n  props: AriaToggleButtonProps<ElementType>,\n  state: ToggleState\n): any {\n  /* eslint-enable no-redeclare */\n  const { isSelected } = state;\n  const { isPressed, buttonProps } = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress),\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      // For v0.14+\n      'aria-pressed': isSelected,\n\n      // For v0.15+\n      'accessibilityPressed': isSelected,\n    }),\n  };\n}\n"],"mappings":";;;;AAcA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAQO,SAASE,eAATA,CACLC,KADK,EAELC,KAFK,EAGA;EAEL,IAAQC,UAAA,GAAeD,KAAvB,CAAQC,UAAA;EACR,IAAAC,UAAA,GAAmC,IAAAC,qBAAS,EAAAC,MAAA,CAAAC,MAAA,KACvCN,KADwC;MAE3CO,OAAO,EAAE,IAAAC,YAAK,EAACP,KAAK,CAACQ,MAAP,EAAeT,KAAK,CAACO,OAArB;IAAA,EAF4B,CAA5C;IAAQG,SAAF,GAAAP,UAAA,CAAEO,SAAF;IAAaC,WAAA,GAAAR,UAAA,CAAAQ,WAAA;EAKnB,OAAO;IACLD,SADK,EACLA,SADK;IAELC,WAAW,EAAE,IAAAC,iBAAU,EAACD,WAAD,EAAc;MAEnC,gBAAgBT,UAFmB;MAKnC,wBAAwBA;IALW,CAAd;EAFlB,CAAP;AAUD"},"metadata":{},"sourceType":"script","externalDependencies":[]}