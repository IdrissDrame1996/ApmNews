{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOption = useOption;\nvar _collections = require(\"@react-stately/collections\");\nvar _utils = require(\"./utils\");\nvar _interactions = require(\"@react-aria/interactions\");\nvar _interactions2 = require(\"@react-native-aria/interactions\");\nvar _utils2 = require(\"@react-aria/utils\");\nvar _selection = require(\"@react-aria/selection\");\nvar _utils3 = require(\"@react-native-aria/utils\");\nfunction useOption(props, state, ref) {\n  var isSelected = props.isSelected,\n    isDisabled = props.isDisabled,\n    key = props.key,\n    shouldSelectOnPressUp = props.shouldSelectOnPressUp,\n    shouldFocusOnHover = props.shouldFocusOnHover,\n    isVirtualized = props.isVirtualized,\n    shouldUseVirtualFocus = props.shouldUseVirtualFocus;\n  var labelId = (0, _utils2.useSlotId)();\n  var descriptionId = (0, _utils2.useSlotId)();\n  var _optionProps = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n  if (!((0, _utils2.isMac)() && (0, _utils2.isWebKit)())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n  if (isVirtualized) {\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = (0, _collections.getItemCount)(state.collection);\n  }\n  var _useSelectableItem = (0, _selection.useSelectableItem)({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: shouldSelectOnPressUp,\n      isVirtualized: isVirtualized,\n      shouldUseVirtualFocus: shouldUseVirtualFocus\n    }),\n    itemProps = _useSelectableItem.itemProps;\n  var _usePress = (0, _interactions2.usePress)(Object.assign({}, itemProps, {\n      isDisabled: isDisabled,\n      preventFocusOnPress: shouldUseVirtualFocus\n    })),\n    pressProps = _usePress.pressProps;\n  var _useHover = (0, _interactions2.useHover)({\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart: function onHoverStart() {\n        if (!(0, _interactions.isFocusVisible)()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }, ref),\n    hoverProps = _useHover.hoverProps;\n  var onMouseDown = function onMouseDown(e) {\n    return e.stopPropagation();\n  };\n  _optionProps = Object.assign({}, _optionProps, (0, _utils2.mergeProps)(pressProps, hoverProps), {\n    id: (0, _utils.getItemId)(state, key),\n    onMouseDown: onMouseDown\n  });\n  var optionProps = (0, _utils3.useMapDomPropsToRN)(_optionProps, ref);\n  return {\n    optionProps: optionProps,\n    labelProps: {\n      nativeID: labelId\n    },\n    descriptionProps: {\n      nativeID: descriptionId\n    }\n  };\n}","map":{"version":3,"names":["_collections","require","_utils","_interactions","_interactions2","_utils2","_selection","_utils3","useOption","props","state","ref","isSelected","isDisabled","key","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","shouldUseVirtualFocus","labelId","useSlotId","descriptionId","_optionProps","isMac","isWebKit","collection","getItem","index","getItemCount","_useSelectableItem","useSelectableItem","selectionManager","itemProps","_usePress","usePress","Object","assign","preventFocusOnPress","pressProps","_useHover","useHover","onHoverStart","isFocusVisible","setFocused","setFocusedKey","hoverProps","onMouseDown","e","stopPropagation","mergeProps","id","getItemId","optionProps","useMapDomPropsToRN","labelProps","nativeID","descriptionProps"],"sources":["C:\\Users\\idriss.drame\\Projet\\ApmNews\\node_modules\\@react-native-aria\\listbox\\lib\\module\\useOption.web.ts"],"sourcesContent":["import { getItemCount } from '@react-stately/collections';\nimport { getItemId } from './utils';\nimport { Key, RefObject } from 'react';\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { ListState } from '@react-stately/list';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: any;\n\n  /** Props for the main text element inside the option. */\n  labelProps: any;\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: any;\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the option is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string;\n\n  /** The unique key for the option. */\n  'key'?: Key;\n\n  /** Whether selection should occur on press up instead of press down. */\n  'shouldSelectOnPressUp'?: boolean;\n\n  /** Whether the option should be focused when the user hovers over it. */\n  'shouldFocusOnHover'?: boolean;\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  'isVirtualized'?: boolean;\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  'shouldUseVirtualFocus'?: boolean;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(\n  props: AriaOptionProps,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let _optionProps: any = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected,\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    //@ts-ignore\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    //@ts-ignore\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  });\n\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus,\n  });\n\n  let { hoverProps } = useHover(\n    {\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          //@ts-ignore\n          state.selectionManager.setFocusedKey(key);\n        }\n      },\n    },\n    ref\n  );\n\n  // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n  const onMouseDown = (e: any) => e.stopPropagation();\n\n  _optionProps = {\n    ..._optionProps,\n    ...mergeProps(pressProps, hoverProps),\n    //@ts-ignore\n    id: getItemId(state, key),\n    onMouseDown,\n  };\n\n  const optionProps = useMapDomPropsToRN(_optionProps, ref);\n\n  return {\n    optionProps,\n    labelProps: {\n      nativeID: labelId,\n    },\n    descriptionProps: {\n      nativeID: descriptionId,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}